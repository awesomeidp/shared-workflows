apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ include "quarkus-pipeline.fullname" . }}
  labels:
    {{- include "quarkus-pipeline.labels" . | nindent 4 }}  
spec:
  description: | 
    Golden Path pipeline for Quarkus applications
  params:
  - name: repo-name
    type: string
    description: the name of the repo deployment
  - name: repo-owner
    type: string
    description: the owner of the repo deployment    
  - name: repo-url
    type: string
    description: url of the git repo
  - name: revision
    type: string
    description: revision to be used
    default: "main"
  - name: image
    type: string
    description: image to be built from the code
  - name: gitops-repo-url
    type: string
    description: url of the gitops repo
  - name: application-name
    type: string
  - name: sonarcloud-organization
    type: string 
  - name: tasks-to-skip
    type: array               
  workspaces:
  - name: source-workspace
  - name: sonar-settings
  - name: sonar-credentials
  - name: maven-settings
  - name: dockerconfig
  - name: basic-auth
  - name: gitops-source-workspace
  tasks:
  - name: acquire-lease
    taskRef:
      name: lease-management
      kind: ClusterTask
    when:
      - input: acquire-lease
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]       
    params:
    - name: name
      value: "$(context.pipeline.name)"
    - name: owner
      value: "$(context.pipelineRun.name)"  
    - name: timeout
      value: "120"
    - name: action
      value: acquire             
  - name: fetch-source
    taskRef:
      kind: ClusterTask
      name: git-clone
    when:
      - input: fetch-source
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    runAfter:
    - acquire-lease  
    workspaces:
    - name: output
      workspace: source-workspace
    - name: basic-auth
      workspace: basic-auth  
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.revision)
    - name: deleteExisting
      value: "true"
  - name: code-analysis
    taskRef:
      name: sonarqube-scanner
      kind: ClusterTask
    runAfter:
      - build-code      
    when:
      - input: code-analysis
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]   
    params:
      - name: SONAR_HOST_URL
        value: http://sonarqube.sonarqube.svc:9000
      - name: SONAR_PROJECT_KEY
        value: "$(params.repo-name)" 
      - name: SONAR_ORGANIZATION
        value: "$(params.sonarcloud-organization)"
      - name: SONAR_LOGIN_KEY
        value: "SONARQUBE_TOKEN"  
    workspaces:
      - name: source
        workspace: source-workspace
      - name: sonar-settings
        workspace: sonar-settings
      - name: sonar-credentials
        workspace: sonar-credentials               
  - name: build-code
    taskRef:
      kind: ClusterTask
      name: maven
    when:
      - input: build-code
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    runAfter:
    - fetch-source
    params:
    - name: GOALS
      value:
        - -DskipTests
        - -Dmaven.repo.local=$(workspaces.maven-settings.path)
        - verify
        - package
    workspaces:
    - name: source
      workspace: source-workspace
    - name: maven-settings
      workspace: maven-settings                 
  - name: build-image
    runAfter: 
    - build-code
    - code-analysis
    when:
      - input: build-image
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]    
    taskRef:
      kind: ClusterTask
      name: buildah
    params:
    - name: IMAGE
      value: $(params.image)
    - name: DOCKERFILE      
      value: ./src/main/docker/Dockerfile.jvm
    workspaces:
    - name: source
      workspace: source-workspace
    - name: dockerconfig
      workspace: dockerconfig
  - name: fetch-gitops-source
    taskRef:
      kind: ClusterTask
      name: git-clone
    when:
      - input: fetch-gitops-source
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    runAfter:
    - acquire-lease 
    workspaces:
    - name: output
      workspace: gitops-source-workspace
    - name: basic-auth
      workspace: basic-auth  
    params:
    - name: url
      value: $(params.gitops-repo-url)
    - name: revision
      value: master
    - name: deleteExisting
      value: "true"       
  - name: deploy-to-dev
    runAfter:
      - build-image
      - fetch-gitops-source
    when:
      - input: deploy-to-dev
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    taskRef:
      kind: ClusterTask
      name: git-cli
    workspaces:
    - name: source
      workspace: gitops-source-workspace
    - name: basic-auth
      workspace: basic-auth      
    params:
    - name: GIT_USER_NAME
      value: tekton-$(params.repo-name)[bot]
    - name: GIT_USER_EMAIL
      value: tekton-$(params.repo-name)[bot]@users.noreply.github.com
    - name: GIT_SCRIPT
      value: |
        sed -i "s/            tag: [a-zA-Z0-9]*/            tag: $(params.revision)/g" components/$(params.repo-name)-argocd-app-dev.yaml
        git commit -m "image update - release dev $(params.revision)" -a --allow-empty
        git push $(params.gitops-repo-url) HEAD:master --follow-tags
  - name: verify-deployment-to-dev
    runAfter:
      - deploy-to-dev
    when:
      - input: verify-deployment-to-dev
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]
    taskRef:
      kind: ClusterTask
      name: argocd-task-sync-and-wait
    params:
    - name: application-name         
      value: "$(params.repo-name)-dev"
  - name: deploy-to-qa
    runAfter:
      - verify-deployment-to-dev
    when:
      - input: deploy-to-qa
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    taskRef:
      kind: ClusterTask
      name: git-cli
    workspaces:
    - name: source
      workspace: gitops-source-workspace
    - name: basic-auth
      workspace: basic-auth
    params:
    - name: GIT_USER_NAME
      value: tekton-$(params.repo-name)[bot]
    - name: GIT_USER_EMAIL
      value: tekton-$(params.repo-name)[bot]@users.noreply.github.com    
    - name: GIT_SCRIPT
      value: |
        sed -i "s/            tag: [a-zA-Z0-9]*/            tag: $(params.revision)/g" components/$(params.repo-name)-argocd-app-qa.yaml
        git commit -m "image update - release qa $(params.revision)" -a --allow-empty
        git push $(params.gitops-repo-url) HEAD:master --follow-tags
  - name: verify-deployment-to-qa
    runAfter:
      - deploy-to-qa
    when:
      - input: verify-deployment-to-qa
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]
    taskRef:
      kind: ClusterTask
      name: argocd-task-sync-and-wait
    params:
    - name: application-name         
      value: "$(params.repo-name)-qa"
  - name: deploy-to-prod
    runAfter:
      - verify-deployment-to-qa
    when:
      - input: deploy-to-prod
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]      
    taskRef:
      kind: ClusterTask
      name: git-cli
    workspaces:
    - name: source
      workspace: gitops-source-workspace
    - name: basic-auth
      workspace: basic-auth
    params:
    - name: GIT_USER_NAME
      value: tekton-$(params.repo-name)[bot]
    - name: GIT_USER_EMAIL
      value: tekton-$(params.repo-name)[bot]@users.noreply.github.com    
    - name: GIT_SCRIPT
      value: |
        sed -i "s/            tag: [a-zA-Z0-9]*/            tag: $(params.revision)/g" components/$(params.repo-name)-argocd-app-prod.yaml
        git commit -m "image update - release prod $(params.revision)" -a --allow-empty
        git push $(params.gitops-repo-url) HEAD:master --follow-tags
  - name: verify-deployment-to-prod
    runAfter:
      - deploy-to-prod
    when:
      - input: verify-deployment-to-prod
        operator: notin
        values: ["$(params.tasks-to-skip[*])"]
    taskRef:
      kind: ClusterTask
      name: argocd-task-sync-and-wait
    params:
    - name: application-name         
      value: "$(params.repo-name)-prod"              
  finally:
    - name: release-lease
      taskRef:
        name: lease-management
        kind: ClusterTask
      params:
      - name: name
        value: "$(context.pipeline.name)"
      - name: owner
        value: "$(context.pipelineRun.name)"  
      - name: timeout
        value: "120"
      - name: action
        value: release  
  # taskRunSpecs:
  # - pipelineTaskName: acquire-lease
  #   computeResources:
  #     requests:
  #       cpu: 200m
  #       memory: 500Mi  
  # - pipelineTaskName: release-lease
  #   computeResources:
  #     requests:
  #       cpu: 200m
  #       memory: 500Mi                  

